BEGIN
DBMS_OUTPUT.PUT_LINE('HELLO WORLD!');
DBMS_OUTPUT.PUT_LINE('HELLO WORLD!');
END;

BEGIN
DBMS_OUTPUT.PUT_LINE('HELLO WORLD!');
DBMS_OUTPUT.PUT('HOW ARE YOU?');
DBMS_OUTPUT.PUT(', I AM FINE');
DBMS_OUTPUT.PUT_LINE(' ');
END;

DECLARE
	X NUMBER := 10;
    F FLOAT := 25.56;
    CH VARCHAR(25) := 'SHREE';
BEGIN
    DBMS_OUTPUT.PUT_LINE('THE VALUE OF X = '||X);
    DBMS_OUTPUT.PUT_LINE('THE VALUE OF F = '||F);
    DBMS_OUTPUT.PUT_LINE('THE VALUE OF CH = '||CH);
END;

DECLARE --FIRST
X NUMBER := 10;
BEGIN
    DECLARE --SECOND
    Y NUMBER := 20;
    BEGIN
        DECLARE --THIRD
        Z NUMBER := 30;
        BEGIN
            DBMS_OUTPUT.PUT_LINE('THIRD BLOCK := ');
            DBMS_OUTPUT.PUT_LINE('THE VALUE OF X = '||X);
            DBMS_OUTPUT.PUT_LINE('THE VALUE OF Y = '||Y);
            DBMS_OUTPUT.PUT_LINE('THE VALUE OF Z = '||Z);
        END; --THIRD
        DBMS_OUTPUT.PUT_LINE('SECOND BLOCK := ');
        DBMS_OUTPUT.PUT_LINE('THE VALUE OF X = '||X);
        DBMS_OUTPUT.PUT_LINE('THE VALUE OF Y = '||Y);
    END; --SECOND
    DBMS_OUTPUT.PUT_LINE('FIRST BLOCK := ');
    DBMS_OUTPUT.PUT_LINE('THE VALUE OF X = '||X);
END; --FIRST

DECLARE
	AGE NUMBER:=16;
BEGIN
IF AGE>18 THEN
	DBMS_OUTPUT.PUT_LINE('YOU ARE ELIGIBLE FOR VOTING');
ELSE
	DBMS_OUTPUT.PUT_LINE('YOU ARE NOT ELIGIBLE FOR VOTING');
END IF;
END;

DECLARE
	X NUMBER := 16;
BEGIN
IF MOD(X,2) = 0 THEN
	DBMS_OUTPUT.PUT_LINE(X||' IS AN EVEN NUMBER');
ELSE
	DBMS_OUTPUT.PUT_LINE(X||' IS AN ODD NUMBER');
END IF;
END;

DECLARE
	X NUMBER := 0;
BEGIN
	IF X>0 THEN
		DBMS_OUTPUT.PUT_LINE(X||' IS A POSITIVE NUMBER');
	ELSIF X<0 THEN
		DBMS_OUTPUT.PUT_LINE(X||' IS A NEGATIVE NUMBER');
	ELSE
		DBMS_OUTPUT.PUT_LINE(X||' IS A NEUTRAL NUMBER');
	END IF;
END;

DECLARE
	N1 NUMBER := 90;
	N2 NUMBER := 20;
	N3 NUMBER := 30;
BEGIN
	IF N1>N2 AND N1>N3 THEN
		DBMS_OUTPUT.PUT_LINE(N1||' IS THE BIGGEST NUMBER');
	ELSIF N2>N1 AND N2>N3 THEN
		DBMS_OUTPUT.PUT_LINE(N2||' IS THE BIGGEST NUMBER');
	ELSE
		DBMS_OUTPUT.PUT_LINE(N3||' IS THE BIGGEST NUMBER');
	END IF;
END;

-- SIMPLE LOOP
DECLARE 
	I NUMBER := 1;
BEGIN
	LOOP
		DBMS_OUTPUT.PUT_LINE('TOPS TECHNOLOGIES');
		IF I=5 THEN
            EXIT;
		END IF;
		I := I + 1;
	END LOOP;
END;

-- SIMPLE LOOP
DECLARE 
	I NUMBER := 1;
BEGIN
	LOOP
		DBMS_OUTPUT.PUT_LINE('TOPS TECHNOLOGIES');
		EXIT WHEN I=5;
		I := I + 1;
	END LOOP;
END;

-- FOR LOOP
BEGIN
	FOR I IN 1..5 LOOP
		DBMS_OUTPUT.PUT_LINE(I||'.TOPS TECHNOLOGIES');
	END LOOP;
END;

DECLARE
    X NUMBER := 5;
BEGIN
	FOR I IN 1..5 LOOP
		DBMS_OUTPUT.PUT_LINE(X||'.TOPS TECHNOLOGIES');
		X := X - 1;
	END LOOP;
END;

-- WHILE LOOP
DECLARE
	X NUMBER := 1;
BEGIN
	WHILE X<=5 LOOP
		DBMS_OUTPUT.PUT_LINE(X||'.TOPS TECHNOLOGIES');
		X := X + 1;
	END LOOP;
END;

-- EXLICIT CURSOR
DECLARE
	EID EMPLOYEES.EMPLOYEE_ID%TYPE;
	FNAME EMPLOYEES.FIRST_NAME%TYPE;
	SAL EMPLOYEES.SALARY%TYPE;
	CURSOR EMP IS SELECT EMPLOYEE_ID,FIRST_NAME,SALARY FROM EMPLOYEES; 
BEGIN
	OPEN EMP;
	LOOP
	FETCH EMP INTO EID,FNAME,SAL;
	DBMS_OUTPUT.PUT_LINE(FNAME||' EARNS MONTHLY '||SAL||'$ WHOSE EMPLOYEE ID IS '||EID);
	EXIT WHEN EMP%NOTFOUND;
	END LOOP;
	CLOSE EMP;
END;

-- IMPLICIT CURSOR
DECLARE 
	ROW_NUMBER NUMBER := 0;
BEGIN
	UPDATE EMPLOYEES SET SALARY = SALARY + 2000 WHERE DEPARTMENT_ID = 50;
	IF SQL%FOUND THEN
		ROW_NUMBER := SQL%ROWCOUNT;
	ELSE
		DBMS_OUTPUT.PUT_LINE('NO EMPLOYEE RECORD IS UPDATED');
	END IF;
	DBMS_OUTPUT.PUT_LINE('UPDATED DATA = '||ROW_NUMBER);
END;

SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = 50;

-- WRITE A PROGRAM TO DISPLAY FACTORIAL OF GIVEN NUMBER
-- WRITE A PROGRAM TO CHECK WHETHER THE NUMBER IS PRIME OR NOT
-- WRITE A PROGRAM TO CHECK WHETHER THE NUMBER IS PALLINDROME OR NOT
-- WRITE A PROGRAM TO CHECK WHETHER THE NUMBER IS ARMSTRONG NUMBER OR NOT
-- WRITE A PROGRAM TO DISPLAY FIBONNACI SERIES TILL N TERMS

/* WRITE A PROGRAM TO PRINT THIS PATTERN (DECLARE ROW AND COL NUMBERS)
ROW = 3
COL = 3
* * *
* * *
* * *
*/

/* WRITE A PROGRAM TO PRINT THIS PATTERN (DECLARE ROW NUMBERS)
ROW = 5
* 
* * 
* * *
* * * * 
* * * * *
*/

/* WRITE A PROGRAM TO PRINT THIS PATTERN (DECLARE ROW NUMBERS)
ROW = 5
    * 
   * * 
  * * *
 * * * * 
* * * * *
*/